// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protostuff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProtoStuffClient is the client API for ProtoStuff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtoStuffClient interface {
	StreamEventLog(ctx context.Context, in *Player, opts ...grpc.CallOption) (ProtoStuff_StreamEventLogClient, error)
}

type protoStuffClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoStuffClient(cc grpc.ClientConnInterface) ProtoStuffClient {
	return &protoStuffClient{cc}
}

func (c *protoStuffClient) StreamEventLog(ctx context.Context, in *Player, opts ...grpc.CallOption) (ProtoStuff_StreamEventLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProtoStuff_ServiceDesc.Streams[0], "/protostuff.ProtoStuff/StreamEventLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &protoStuffStreamEventLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtoStuff_StreamEventLogClient interface {
	Recv() (*PlayerEventLog, error)
	grpc.ClientStream
}

type protoStuffStreamEventLogClient struct {
	grpc.ClientStream
}

func (x *protoStuffStreamEventLogClient) Recv() (*PlayerEventLog, error) {
	m := new(PlayerEventLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProtoStuffServer is the server API for ProtoStuff service.
// All implementations must embed UnimplementedProtoStuffServer
// for forward compatibility
type ProtoStuffServer interface {
	StreamEventLog(*Player, ProtoStuff_StreamEventLogServer) error
	mustEmbedUnimplementedProtoStuffServer()
}

// UnimplementedProtoStuffServer must be embedded to have forward compatible implementations.
type UnimplementedProtoStuffServer struct {
}

func (UnimplementedProtoStuffServer) StreamEventLog(*Player, ProtoStuff_StreamEventLogServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEventLog not implemented")
}
func (UnimplementedProtoStuffServer) mustEmbedUnimplementedProtoStuffServer() {}

// UnsafeProtoStuffServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtoStuffServer will
// result in compilation errors.
type UnsafeProtoStuffServer interface {
	mustEmbedUnimplementedProtoStuffServer()
}

func RegisterProtoStuffServer(s grpc.ServiceRegistrar, srv ProtoStuffServer) {
	s.RegisterService(&ProtoStuff_ServiceDesc, srv)
}

func _ProtoStuff_StreamEventLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Player)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtoStuffServer).StreamEventLog(m, &protoStuffStreamEventLogServer{stream})
}

type ProtoStuff_StreamEventLogServer interface {
	Send(*PlayerEventLog) error
	grpc.ServerStream
}

type protoStuffStreamEventLogServer struct {
	grpc.ServerStream
}

func (x *protoStuffStreamEventLogServer) Send(m *PlayerEventLog) error {
	return x.ServerStream.SendMsg(m)
}

// ProtoStuff_ServiceDesc is the grpc.ServiceDesc for ProtoStuff service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtoStuff_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protostuff.ProtoStuff",
	HandlerType: (*ProtoStuffServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEventLog",
			Handler:       _ProtoStuff_StreamEventLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stuff.proto",
}
