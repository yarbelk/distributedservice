// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProtoStuffClient is the client API for ProtoStuff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtoStuffClient interface {
	StreamEventLog(ctx context.Context, in *Customer, opts ...grpc.CallOption) (ProtoStuff_StreamEventLogClient, error)
	CustomerState(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*CustomerState, error)
	WriteLog(ctx context.Context, in *NewCustomerLog, opts ...grpc.CallOption) (*ErrorDetails, error)
}

type protoStuffClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoStuffClient(cc grpc.ClientConnInterface) ProtoStuffClient {
	return &protoStuffClient{cc}
}

func (c *protoStuffClient) StreamEventLog(ctx context.Context, in *Customer, opts ...grpc.CallOption) (ProtoStuff_StreamEventLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProtoStuff_ServiceDesc.Streams[0], "/proto.ProtoStuff/StreamEventLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &protoStuffStreamEventLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtoStuff_StreamEventLogClient interface {
	Recv() (*CustomerEventLog, error)
	grpc.ClientStream
}

type protoStuffStreamEventLogClient struct {
	grpc.ClientStream
}

func (x *protoStuffStreamEventLogClient) Recv() (*CustomerEventLog, error) {
	m := new(CustomerEventLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protoStuffClient) CustomerState(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*CustomerState, error) {
	out := new(CustomerState)
	err := c.cc.Invoke(ctx, "/proto.ProtoStuff/CustomerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoStuffClient) WriteLog(ctx context.Context, in *NewCustomerLog, opts ...grpc.CallOption) (*ErrorDetails, error) {
	out := new(ErrorDetails)
	err := c.cc.Invoke(ctx, "/proto.ProtoStuff/WriteLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtoStuffServer is the server API for ProtoStuff service.
// All implementations must embed UnimplementedProtoStuffServer
// for forward compatibility
type ProtoStuffServer interface {
	StreamEventLog(*Customer, ProtoStuff_StreamEventLogServer) error
	CustomerState(context.Context, *Customer) (*CustomerState, error)
	WriteLog(context.Context, *NewCustomerLog) (*ErrorDetails, error)
	mustEmbedUnimplementedProtoStuffServer()
}

// UnimplementedProtoStuffServer must be embedded to have forward compatible implementations.
type UnimplementedProtoStuffServer struct {
}

func (UnimplementedProtoStuffServer) StreamEventLog(*Customer, ProtoStuff_StreamEventLogServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEventLog not implemented")
}
func (UnimplementedProtoStuffServer) CustomerState(context.Context, *Customer) (*CustomerState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerState not implemented")
}
func (UnimplementedProtoStuffServer) WriteLog(context.Context, *NewCustomerLog) (*ErrorDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteLog not implemented")
}
func (UnimplementedProtoStuffServer) mustEmbedUnimplementedProtoStuffServer() {}

// UnsafeProtoStuffServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtoStuffServer will
// result in compilation errors.
type UnsafeProtoStuffServer interface {
	mustEmbedUnimplementedProtoStuffServer()
}

func RegisterProtoStuffServer(s grpc.ServiceRegistrar, srv ProtoStuffServer) {
	s.RegisterService(&ProtoStuff_ServiceDesc, srv)
}

func _ProtoStuff_StreamEventLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Customer)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtoStuffServer).StreamEventLog(m, &protoStuffStreamEventLogServer{stream})
}

type ProtoStuff_StreamEventLogServer interface {
	Send(*CustomerEventLog) error
	grpc.ServerStream
}

type protoStuffStreamEventLogServer struct {
	grpc.ServerStream
}

func (x *protoStuffStreamEventLogServer) Send(m *CustomerEventLog) error {
	return x.ServerStream.SendMsg(m)
}

func _ProtoStuff_CustomerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoStuffServer).CustomerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProtoStuff/CustomerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoStuffServer).CustomerState(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoStuff_WriteLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCustomerLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoStuffServer).WriteLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProtoStuff/WriteLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoStuffServer).WriteLog(ctx, req.(*NewCustomerLog))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtoStuff_ServiceDesc is the grpc.ServiceDesc for ProtoStuff service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtoStuff_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProtoStuff",
	HandlerType: (*ProtoStuffServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CustomerState",
			Handler:    _ProtoStuff_CustomerState_Handler,
		},
		{
			MethodName: "WriteLog",
			Handler:    _ProtoStuff_WriteLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEventLog",
			Handler:       _ProtoStuff_StreamEventLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stuff.proto",
}
